name: Bundle Size Monitor

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.ts'
      - 'tsconfig.json'

jobs:
  bundle-size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build current version
        run: npm run build
        
      - name: Calculate current bundle size
        id: current
        run: |
          total_size=$(du -sb dist/ | cut -f1)
          total_mb=$(echo "scale=2; $total_size / 1024 / 1024" | bc -l)
          
          echo "total_size=$total_size" >> $GITHUB_OUTPUT
          echo "total_mb=$total_mb" >> $GITHUB_OUTPUT
          
          echo "📊 Current bundle size: ${total_mb}MB"
          
      - name: Check if size exceeds limits
        run: |
          current_size=${{ steps.current.outputs.total_size }}
          max_size=$((5 * 1024 * 1024))  # 5MB limit
          
          if [ "$current_size" -gt "$max_size" ]; then
            echo "❌ Bundle exceeds 5MB limit: ${{ steps.current.outputs.total_mb }}MB"
            exit 1
          fi
          
          echo "✅ Bundle size within limits: ${{ steps.current.outputs.total_mb }}MB"
          
      - name: Compare with base branch
        run: |
          # Build base version
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }}
          
          npm ci
          npm run build
          
          base_size=$(du -sb dist/ | cut -f1)
          base_mb=$(echo "scale=2; $base_size / 1024 / 1024" | bc -l)
          
          # Return to PR branch
          git checkout ${{ github.sha }}
          
          # Calculate difference
          current_size=${{ steps.current.outputs.total_size }}
          size_diff=$((current_size - base_size))
          diff_mb=$(echo "scale=2; $size_diff / 1024 / 1024" | bc -l)
          
          echo "📊 Bundle Size Comparison"
          echo "Base: ${base_mb}MB"
          echo "Current: ${{ steps.current.outputs.total_mb }}MB"
          echo "Difference: ${diff_mb}MB"
          
          # Create PR comment
          cat > bundle-comment.md << EOF
          ## 📊 Bundle Size Report
          
          | Metric | Size | Change |
          |--------|------|--------|
          | **Base** | ${base_mb}MB | - |
          | **Current** | ${{ steps.current.outputs.total_mb }}MB | ${diff_mb}MB |
          
          $(if [ "$size_diff" -gt $((100 * 1024)) ]; then echo "⚠️ Bundle increased by more than 100KB"; elif [ "$size_diff" -lt 0 ]; then echo "✅ Bundle size decreased!"; else echo "✅ Bundle size change is minimal"; fi)
          EOF
          
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('bundle-comment.md')) {
              console.log('No bundle comment to post');
              return;
            }
            
            const body = fs.readFileSync('bundle-comment.md', 'utf8');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('📊 Bundle Size Report')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }