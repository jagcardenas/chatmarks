name: Release and Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      publish_to_store:
        description: 'Publish to Chrome Web Store'
        required: true
        default: false
        type: boolean

jobs:
  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Bump version
        id: version
        run: |
          # Get current version
          current_version=$(node -p "require('./package.json').version")
          echo "Current version: $current_version"
          
          # Bump version
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          new_version=$(node -p "require('./package.json').version")
          echo "New version: $new_version"
          
          # Update manifest.json version
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$new_version';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\n');
          "
          
          # Commit changes
          git add package.json package-lock.json manifest.json
          git commit -m "chore: bump version to v$new_version"
          git tag "v$new_version"
          git push origin HEAD --tags
          
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always() && !failure()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run full test suite
        run: |
          npm run typecheck
          npm run lint
          npm run test:coverage
          
      - name: Build extension for release
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Validate release build
        run: |
          echo "🔍 Validating release build..."
          
          # Check manifest version matches package.json
          package_version=$(node -p "require('./package.json').version")
          manifest_version=$(node -p "require('./dist/manifest.json').version")
          
          if [ "$package_version" != "$manifest_version" ]; then
            echo "❌ Version mismatch: package.json ($package_version) != manifest.json ($manifest_version)"
            exit 1
          fi
          
          echo "✅ Version consistency validated: $package_version"
          
      - name: Create extension package
        run: |
          echo "📦 Creating extension package..."
          cd dist
          zip -r ../chatmarks-extension.zip .
          cd ..
          
          echo "📊 Package size:"
          ls -lh chatmarks-extension.zip
          
      - name: Upload extension package
        uses: actions/upload-artifact@v4
        with:
          name: chatmarks-extension-${{ github.sha }}
          path: chatmarks-extension.zip
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-test]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: |
          echo "🛡️  Running security audit..."
          npm audit --audit-level=high
          
      - name: Build for security scan
        run: npm run build
        
      - name: Scan for sensitive data
        run: |
          echo "🔍 Scanning for sensitive data in build..."
          
          # Check for common sensitive patterns
          sensitive_patterns=(
            "api[_-]?key"
            "secret"
            "password"
            "token"
            "private[_-]?key"
            "auth[_-]?token"
          )
          
          found_sensitive=false
          for pattern in "${sensitive_patterns[@]}"; do
            if grep -ri "$pattern" dist/ --exclude-dir=node_modules; then
              echo "⚠️  Found potentially sensitive data: $pattern"
              found_sensitive=true
            fi
          done
          
          if [ "$found_sensitive" = true ]; then
            echo "❌ Sensitive data detected in build"
            exit 1
          fi
          
          echo "✅ No sensitive data found in build"

  chrome-web-store:
    name: Deploy to Chrome Web Store
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_store == 'true')
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Download extension package
        uses: actions/download-artifact@v5
        with:
          name: chatmarks-extension-${{ github.sha }}
          
      - name: Setup Chrome Web Store CLI
        run: |
          echo "🏪 Setting up Chrome Web Store deployment..."
          npm install -g chrome-webstore-upload-cli
          
      - name: Upload to Chrome Web Store
        env:
          EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
          CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
        run: |
          echo "📤 Uploading to Chrome Web Store..."
          
          # Upload extension
          chrome-webstore-upload upload \
            --source chatmarks-extension.zip \
            --extension-id $EXTENSION_ID \
            --client-id $CLIENT_ID \
            --client-secret $CLIENT_SECRET \
            --refresh-token $REFRESH_TOKEN
            
          echo "✅ Extension uploaded successfully"
          
      - name: Publish to Chrome Web Store
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
          CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
        run: |
          echo "🚀 Publishing to Chrome Web Store..."
          
          # Publish extension
          chrome-webstore-upload publish \
            --extension-id $EXTENSION_ID \
            --client-id $CLIENT_ID \
            --client-secret $CLIENT_SECRET \
            --refresh-token $REFRESH_TOKEN
            
          echo "✅ Extension published successfully"

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          
      - name: Download extension package
        uses: actions/download-artifact@v5
        with:
          name: chatmarks-extension-${{ github.sha }}
          
      - name: Generate release notes
        id: release_notes
        run: |
          echo "📝 Generating release notes..."
          
          # Get version from tag
          version=${GITHUB_REF#refs/tags/}
          echo "version=$version" >> $GITHUB_OUTPUT
          
          # Generate release notes from commits since last tag
          last_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$last_tag" ]; then
            echo "## Changes since $last_tag" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $last_tag..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "" >> release_notes.md
            echo "- Initial version of Chatmarks Chrome Extension" >> release_notes.md
          fi
          
          # Add installation instructions
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "1. Download the \`chatmarks-extension.zip\` file below" >> release_notes.md
          echo "2. Extract the contents to a folder" >> release_notes.md
          echo "3. Open Chrome and navigate to \`chrome://extensions/\`" >> release_notes.md
          echo "4. Enable \"Developer mode\" in the top right" >> release_notes.md
          echo "5. Click \"Load unpacked\" and select the extracted folder" >> release_notes.md
          echo "" >> release_notes.md
          echo "The extension will also be available on the Chrome Web Store shortly." >> release_notes.md
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_notes.outputs.version }}
          release_name: Chatmarks ${{ steps.release_notes.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./chatmarks-extension.zip
          asset_name: chatmarks-extension.zip
          asset_content_type: application/zip