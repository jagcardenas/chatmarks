name: Release and Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      publish_to_store:
        description: 'Publish to Chrome Web Store'
        required: true
        default: false
        type: boolean

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Version bump (manual trigger only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          new_version=$(node -p "require('./package.json').version")
          
          # Update manifest.json
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$new_version';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\n');
          "
          
          git add package.json package-lock.json manifest.json
          git commit -m "chore: bump version to v$new_version"
          git tag "v$new_version"
          git push origin HEAD --tags
          
      - name: Run quality checks
        run: |
          npm run typecheck
          npm run lint
          npm run test:coverage
          
      - name: Security audit
        run: npm audit --audit-level=high
          
      - name: Build extension
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Validate build
        run: |
          # Verify required files exist
          required_files=("manifest.json" "popup.js" "options.js" "service-worker.js" "main.js")
          for file in "${required_files[@]}"; do
            if [ ! -f "dist/$file" ]; then
              echo "❌ Missing: $file"
              exit 1
            fi
          done
          
          # Check for sensitive data
          if grep -ri "api[_-]?key\|secret\|password\|token" dist/ 2>/dev/null; then
            echo "❌ Sensitive data found in build"
            exit 1
          fi
          
          echo "✅ Build validation passed"
          
      - name: Create extension package
        run: |
          cd dist && zip -r ../chatmarks-extension.zip . && cd ..
          echo "📦 Extension package created: $(ls -lh chatmarks-extension.zip | awk '{print $5}')"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chatmarks-extension-${{ github.sha }}
          path: chatmarks-extension.zip
          retention-days: 30

  deploy-chrome-store:
    name: Deploy to Chrome Web Store
    runs-on: ubuntu-latest
    needs: [build-and-release]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_store == 'true')
    environment: production
    
    steps:
      - name: Download extension package
        uses: actions/download-artifact@v4
        with:
          name: chatmarks-extension-${{ github.sha }}
          
      - name: Deploy to Chrome Web Store
        run: |
          npm install -g chrome-webstore-upload-cli
          
          # Upload and optionally publish
          chrome-webstore-upload upload \
            --source chatmarks-extension.zip \
            --extension-id ${{ secrets.CHROME_EXTENSION_ID }} \
            --client-id ${{ secrets.CHROME_CLIENT_ID }} \
            --client-secret ${{ secrets.CHROME_CLIENT_SECRET }} \
            --refresh-token ${{ secrets.CHROME_REFRESH_TOKEN }}
            
          echo "✅ Extension uploaded to Chrome Web Store"

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download extension package
        uses: actions/download-artifact@v4
        with:
          name: chatmarks-extension-${{ github.sha }}
          
      - name: Generate release notes
        id: notes
        run: |
          version=${GITHUB_REF#refs/tags/}
          echo "version=$version" >> $GITHUB_OUTPUT
          
          last_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$last_tag" ]; then
            echo "## Changes since $last_tag" > release_notes.md
            git log --pretty=format:"- %s (%h)" $last_tag..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "- Initial version of Chatmarks Chrome Extension" >> release_notes.md
          fi
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.notes.outputs.version }}
          release_name: Chatmarks ${{ steps.notes.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./chatmarks-extension.zip
          asset_name: chatmarks-extension.zip
          asset_content_type: application/zip