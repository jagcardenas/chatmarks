name: Security Analysis

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  schedule:
    # Run security scan every Sunday at 3 AM UTC
    - cron: '0 3 * * 0'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # Override default queries with security-focused queries
          queries: security-extended,security-and-quality
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build extension
        run: npm run build
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: |
          echo "üîç Running npm security audit..."
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Check if there are any vulnerabilities
          if [ -s audit-results.json ]; then
            echo "üìä Audit results:"
            cat audit-results.json | jq -r '.vulnerabilities | to_entries | map("\(.key): \(.value.severity)") | .[]' || echo "Raw audit results available"
            
            # Check for high/critical vulnerabilities
            high_crit_count=$(cat audit-results.json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' 2>/dev/null || echo "0")
            
            if [ "$high_crit_count" -gt "0" ]; then
              echo "‚ùå Found $high_crit_count high/critical vulnerabilities"
              echo "Please run 'npm audit fix' to resolve issues"
              exit 1
            else
              echo "‚úÖ No high/critical vulnerabilities found"
            fi
          else
            echo "‚úÖ No vulnerabilities detected"
          fi

  extension-security-scan:
    name: Chrome Extension Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build extension
        run: npm run build
        
      - name: Run custom security scan
        run: npm run security-audit
        
      - name: Check for sensitive data in build
        run: |
          echo "üîç Scanning build output for sensitive data..."
          
          # Define patterns to search for
          sensitive_patterns=(
            "api[_-]?key"
            "secret"
            "password"
            "token"
            "private[_-]?key"
            "auth[_-]?token"
            "oauth"
            "bearer\s+[a-zA-Z0-9]+"
          )
          
          found_sensitive=false
          
          for pattern in "${sensitive_patterns[@]}"; do
            if grep -ri "$pattern" dist/ --exclude-dir=node_modules 2>/dev/null; then
              echo "‚ö†Ô∏è  Found potentially sensitive data pattern: $pattern"
              found_sensitive=true
            fi
          done
          
          if [ "$found_sensitive" = true ]; then
            echo "‚ùå Sensitive data patterns detected in build output"
            echo "Please review and remove any hardcoded secrets before deployment"
            exit 1
          else
            echo "‚úÖ No sensitive data patterns found in build output"
          fi
          
      - name: Validate Content Security Policy
        run: |
          echo "üîí Validating Content Security Policy..."
          
          # Check if manifest has CSP defined
          if jq -e '.content_security_policy' dist/manifest.json > /dev/null 2>&1; then
            echo "üìã Content Security Policy found in manifest"
            
            # Extract and validate CSP
            csp=$(jq -r '.content_security_policy' dist/manifest.json)
            echo "CSP: $csp"
            
            # Check for unsafe directives
            unsafe_directives=("'unsafe-eval'" "'unsafe-inline'" "data:" "*")
            
            for directive in "${unsafe_directives[@]}"; do
              if echo "$csp" | grep -q "$directive"; then
                echo "‚ö†Ô∏è  Potentially unsafe CSP directive found: $directive"
              fi
            done
          else
            echo "‚ö†Ô∏è  No Content Security Policy defined in manifest"
            echo "Consider adding CSP for enhanced security"
          fi
          
      - name: Check extension permissions
        run: |
          echo "üîê Validating extension permissions..."
          
          # Extract permissions from manifest
          permissions=$(jq -r '.permissions[]?' dist/manifest.json 2>/dev/null || echo "")
          host_permissions=$(jq -r '.host_permissions[]?' dist/manifest.json 2>/dev/null || echo "")
          
          echo "üìã Declared permissions:"
          echo "$permissions" | while read -r perm; do
            [ -n "$perm" ] && echo "   - $perm"
          done
          
          echo "üìã Host permissions:"
          echo "$host_permissions" | while read -r host; do
            [ -n "$host" ] && echo "   - $host"
          done
          
          # Check for overly broad permissions
          if echo "$permissions" | grep -q "tabs"; then
            echo "‚ö†Ô∏è  'tabs' permission detected - ensure this is necessary"
          fi
          
          if echo "$host_permissions" | grep -q "\*://\*/\*"; then
            echo "‚ùå Overly broad host permission detected: *://*/*"
            echo "Please restrict to specific domains only"
            exit 1
          fi
          
          echo "‚úÖ Permission validation completed"

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch full history for better secret detection
          
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for known vulnerabilities in dependencies
        run: |
          echo "üîç Checking for known vulnerabilities..."
          
          # Use npm audit for vulnerability detection
          npm audit --audit-level=low --json > full-audit.json || true
          
          if [ -s full-audit.json ]; then
            echo "üìä Dependency vulnerability summary:"
            
            # Extract vulnerability counts
            low=$(cat full-audit.json | jq '.metadata.vulnerabilities.low // 0')
            moderate=$(cat full-audit.json | jq '.metadata.vulnerabilities.moderate // 0')
            high=$(cat full-audit.json | jq '.metadata.vulnerabilities.high // 0')
            critical=$(cat full-audit.json | jq '.metadata.vulnerabilities.critical // 0')
            
            echo "   Low: $low"
            echo "   Moderate: $moderate"
            echo "   High: $high"
            echo "   Critical: $critical"
            
            # Fail on high or critical vulnerabilities
            if [ "$high" -gt "0" ] || [ "$critical" -gt "0" ]; then
              echo "‚ùå High or critical vulnerabilities found"
              echo "Please run 'npm audit fix' to resolve"
              exit 1
            fi
            
            if [ "$moderate" -gt "5" ]; then
              echo "‚ö†Ô∏è  Many moderate vulnerabilities found ($moderate)"
              echo "Consider reviewing and updating dependencies"
            fi
          fi
          
      - name: Verify package integrity
        run: |
          echo "üîí Verifying package integrity..."
          
          # Check for package-lock.json
          if [ ! -f "package-lock.json" ]; then
            echo "‚ùå package-lock.json not found"
            echo "This file is required for supply chain security"
            exit 1
          fi
          
          # Verify lockfile integrity
          npm ci --dry-run
          echo "‚úÖ Package lockfile integrity verified"

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, extension-security-scan, secrets-scan, supply-chain-security]
    if: always()
    
    steps:
      - name: Security Summary
        run: |
          echo "üõ°Ô∏è  Security Analysis Summary"
          echo "================================"
          echo ""
          echo "CodeQL Analysis: ${{ needs.codeql.result }}"
          echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "Extension Security: ${{ needs.extension-security-scan.result }}"
          echo "Secrets Detection: ${{ needs.secrets-scan.result }}"
          echo "Supply Chain: ${{ needs.supply-chain-security.result }}"
          echo ""
          
          if [[ "${{ needs.codeql.result }}" == "failure" ]] || 
             [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || 
             [[ "${{ needs.extension-security-scan.result }}" == "failure" ]] || 
             [[ "${{ needs.secrets-scan.result }}" == "failure" ]] || 
             [[ "${{ needs.supply-chain-security.result }}" == "failure" ]]; then
            echo "‚ùå Security issues detected - please review and address"
            exit 1
          else
            echo "‚úÖ All security checks passed"
          fi